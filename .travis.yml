language: java

jdk:
  - openjdk11

services:
  - docker

addons:
  sonarcloud:
    organization: $ORGANIZATION
    token: $SONARCLOUD_TOKEN

install:
  - curl https://cli-assets.heroku.com/install.sh | sh
  - cd codeceptjs-rest
  - npm init -y
  - npm install codeceptjs chai --save-dev
  - npm install mocha-junit-reporter mocha-multi --save
  - cd ..

script:


  - > # BUILD

    echo -e "\e[1;33mCOMENZANDO BUILD";
    #
    cd server;
    mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar;
    #
    look_exit=$?;
    if [[ "$look_exit" = "1" ]]; then # 
      echo "BUILD FALLIDO";
      exit 1;
    fi;
    echo "BUILD EXITOSO";




  - > # CONSTRUCCION DE IMAGEN DE DOCKER

    echo -e "\e[1;33mCOMENZANDO CONSTRUCCION DE IMAGEN DE DOCKER";
    #
    docker build -t $ORGANIZATION/payroll-server:latest .;
    #
    look_exit=$?;
    if [[ "$look_exit" = "1" ]]; then #
      echo -e "\e[1;33mCONSTRUCCION FALLIDA";
      exit 1;
    fi;
    echo -e "\e[1;33mCONSTRUCCION EXITOSA";




  - > # TEST DE INTEGRACION

    echo -e "\e[1;33mCOMENZANDO TEST DE INTEGRACION";
    #
    docker run -d -e "PORT=$PORT" -p $PORT:$PORT $ORGANIZATION/payroll-server:latest;
    export tries=0;
    export max_tries=12;
    while [[ true ]];
    do;
      tries=$((tries + 1));
      echo "ESPERANDO SERVICIO... intento $tries de $max_tries";
      sleep 5;
      curl -G localhost:$PORT;
      look_exit=$?;
      if [[ "$look_exit" = "0" ]]; then #
        echo "SERVICIO DISPONIBLE";
        break;
      fi;
      if [[ "$tries" -ge "$max_tries" ]]; then #
        echo "LIMITE DE TIEMPO ALCANZADO";
        exit 1;
        break;
      fi;
    done;
    cd ../codeceptjs-rest; 
    npx codeceptjs run --steps --reporter mocha-multi;
    #
    look_exit=$?;
    if [[ "$look_exit" = "1" ]]; then #
      echo -e "\e[1;33mTEST DE INTEGRACION FALLIDO";
      exit 1;
    fi;
    echo -e "\e[1;33mTEST DE INTEGRACION EXITOSO";




  - > # DESPLIEGUE A DOCKERHUB

    echo -e "\e[1;33mCOMENZANDO DESPLIEGUE A DOCKERHUB";
    #
    echo "$DOCKER_PASSWORD" | docker login -u $ORGANIZATION --password-stdin;
    docker push $ORGANIZATION/payroll-server:latest;
    #
    look_exit=$?;
    if [[ "$look_exit" = "1" ]]; then #
      echo -e "\e[1;33mDESPLIEGUE A DOCKERHUB FALLIDO";
      exit 1;
    fi;
    echo -e "\e[1;33mDESPLIEGUE A DOCKERHUB EXITOSO";




  - > # DESPLIEGUE A HEROKU REGISTRY

    echo -e "\e[1;33mCOMENZANDO DESPLIEGUE A HEROKU REGISTRY";
    #
    echo "$HEROKU_API_KEY" | docker login -u_ --password-stdin registry.heroku.com;
    docker tag $ORGANIZATION/payroll-server:latest registry.heroku.com/$HEROKU_APP_STAGING/web;
    docker push registry.heroku.com/$HEROKU_APP_STAGING/web;
    #
    look_exit=$?;
    if [[ "$look_exit" = "1" ]]; then #
      echo -e "\e[1;33mDESPLIEGUE A HEROKU REGISTRY FALLIDO";
      exit 1;
    fi;
    echo -e "\e[1;33mDESPLIEGUE A HEROKU REGISTRY EXITOSO";




  - > # RELEASE DE HEROKU APP STAGING

    echo -e "\e[1;33mCOMENZANDO RELEASE DE HEROKU APP STAGING";
    #
    heroku container:release web --app=$HEROKU_APP_STAGING; 
    #
    look_exit=$?;
    if [[ "$look_exit" = "1" ]]; then #
      echo -e "\e[1;33mRELEASE DE HEROKU APP STAGING FALLIDO";
      exit 1;
    fi;
    echo -e "\e[1;33mRELEASE DE HEROKU APP STAGING EXITOSO";


